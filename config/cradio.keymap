// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        l_sp_tab_td: l_sp_tab_td {
            compatible = "zmk,behavior-tap-dance";
            label = "L_SP_TAB_TD";
            #binding-cells = <0>;
            bindings = <&lt 1 SPACE>, <&kp TAB>;

            tapping-term-ms = <200>;
        };

        h_caps_td: h_caps_td {
            compatible = "zmk,behavior-tap-dance";
            label = "H_CAPS_TD";
            #binding-cells = <0>;
            bindings = <&kp H>, <&sk LSHIFT>;
        };

        sl_ht: sl_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "SL_HT";
            bindings = <&sl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        sk_ht: sk_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_HT";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp J        &kp F        &kp M        &kp P        &key_repeat    &key_repeat       &kp SINGLE_QUOTE        &kp Y        &kp V  &kp Z
&ht LC(S) R  &ht LC(X) S  &ht LC(V) N  &ht LC(C) D  &ht LC(A) B    &ht SEMI COMMA    &ht LC(F) A             &ht LC(Z) E  &kp I  &sk_ht LEFT_SHIFT H
&lt 3 X      &kp G        &kp L        &kp C        &kp W          &ht SLASH PERIOD  &ht LC(R) O             &ht LC(Y) U  &kp Q  &kp K
                                       &kp ENTER    &sl_ht 2 T     &l_sp_tab_td      &ht LC(BACKSPACE) BSPC
            >;
        };

        right_layer {
            bindings = <
&kp INS     &kp N1  &kp N2  &kp N3  &trans     &kp HOME         &kp PG_DN  &kp PG_UP     &kp END   &kp COLON
&kp DEL     &kp N4  &kp N5  &kp N6  &trans     &kp LC(LA(TAB))  &kp LEFT   &kp UP_ARROW  &kp DOWN  &kp RIGHT
&caps_word  &kp N7  &kp N8  &kp N9  &kp N0     &trans           &trans     &trans        &trans    &trans
                            &trans  &kp ESC    &trans           &trans
            >;
        };

        left_layer {
            bindings = <
&trans    &kp LBKT  &kp LBRC  &kp RBRC  &trans       &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT  &kp TILDE
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH  &kp GRAVE
&trans    &trans    &trans    &trans    &trans       &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE  &trans
                              &trans    &trans       &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };
};
